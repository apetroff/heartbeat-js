//json
{
	"db": "<db>",

	"initiator" : {
		"httpd" : {
			"port": 50088,
			"static": {
				"index": "index.html"
			},
			"router": "hierarchical",
			"prepare": "<prepare>",
			"workflows": [{
				"path": "entity",
				"workflows": "<entity>"
			}, {
				"path": "",
				"tasks": [{
					"className": "task/redirect",
					"url": "/health/",
					"output": "{$response}"
				}]
			}, {
				"path": "basic",
				"workflows": [{
					"path": "login",
					"prepare": ["session"],
					"tasks": [{
						"className":"task/mongoRequest",
						"description": "get user account",
						"connector": "mongo",
						"collection": "users",
						"pager": {
							"filter": {
								"name": "{$request.body.fields.username}"
							}
						},						
						"produce": "data.mongoResponse"
					}, {
						"className": "task/basic",
						"method": "checkExistAndRender",
						"description": "if exist user with credentials then associate user data with sessionUID",
						"sessionUID": "{$request.sessionUID}",
						"password": "{$request.body.fields.password}",
						"mongoResponse": "{$data.mongoResponse}",
						"produce": "data.user"
					}, {
						"className": "task/mongoRequest",
						"description": "store user/sessionUID",
						"connector": "mongo",
						"method": "update",
						"collection": "users",
						"data": "{$data.user}",
						"produce": "data.ids"
					}, {
						"className":"task/mongoRequest",
						"description": "get user account",
						"connector": "mongo",
						"collection": "users",
						"pager": {
							"filter": "{$data.ids}"
						},
						"options": {
							"fields": {
								"tokens": 0,
								"sessionUIDs": 0
							}
						},						
						"produce": "data.mongoUpdateResponse"
					}],
					"presenter": {
						"completed": {
							"type": "json",
							"vars": "{$data.mongoUpdateResponse}"
						},
						"failed": {
							"type": "json",
							"vars": "{$error}"
						}
					}
				}, {
					"path": "registration",
					"prepare": ["session"],
					"tasks": [{
						"className":"task/mongoRequest",
						"description": "get user account",
						"connector": "mongo",
						"collection": "users",
						"pager": {
							"filter": {
								"name": "{$request.body.fields.username}"
							}
						},						
						"produce": "data.mongoResponse"
					}, {
						"className": "task/basic",
						"method": "checkNoExistAndRender",
						"description": "if noexist user with username then create and associate user data with sessionUID",
						"mongoResponse": "{$data.mongoResponse}",
						"sessionUID": "{$request.sessionUID}",
						"fields": "{$request.body.fields}",
						"produce": "data.user"
					}, {
						"className":"task/mongoRequest",
						"description": "save user",
						"connector": "mongo",
						"method": "insert",
						"insertingSafe": true,
						"collection": "users",
						"data": ["{$data.user}"],
						"produce": "data.mongoCreateResponse"
					}],
					"presenter": {
						"completed": {
							"type": "json",
							"vars": "{$data.mongoCreateResponse}"
						},
						"failed": {
							"type": "json",
							"vars": "{$error}"
						}
					}
				}]
			}, {
					"path": "logout",
					"prepare": ["session", "user"],
					"tasks": [{
						"className": "task/basic",
						"method": "logout",
						"description": "remove sessionUID from sessionUIDs",
						"sessionUID": "{$request.sessionUID}",
						"user": "{$request.user}",
						"produce": "data.user"
					}, {
						"className":"task/mongoRequest",
						"description": "update user data",
						"connector": "mongo",
						"method": "update",
						"collection": "users",
						"data": "{$data.user}",
						"produce": "data.mongoResponse"
					}],
					"presenter": {
						"type": "json",
						"vars": "{$data.mongoResponse}"
					}
			}, {
				"path": "google",
				"workflows": [{
					"path": "login",
					"prepare": ["session"],
					"tasks": [{
						"className": "task/google",
						"description": "get oauth token",
						"scopes": ["profile", "userinfo", "contacts"],
						"req": "{$request}",
						"method": "login",
						"produce": "data.redirectUrl"
					}, {
						"className":"task/mongoRequest",
						"description": "save tokens as anonymous user",
						"connector": "mongo",
						"method": "insert",
						"insertingSafe": true,
						"collection": "users",
						"data": [{
							"sessionUIDs": ["{$request.sessionUID}"],
							"tokens": {
								"_requestUrl": "{$request._requestUrl}",
								"_authorize_callback": "{$request._authorize_callback}",
								"oauth_token": "{$request.oauth_token}",
								"oauth_token_secret": "{$request.oauth_token_secret}"
							}
						}],
						"produce": "data.mongoResponse"
					}, {
						"className": "task/redirect",
						"if": "{$data.mongoResponse}",
						"url": "{$data.redirectUrl}",
						"output": "{$response}"
					}]
				}, {
					"path": "callback",
					"prepare": ["session", "user"],
					"tasks": [{
						"className": "task/google",
						"description": "get access token",
						"req": "{$request}",
						"method": "callback",
						"produce": "data.redirectUrl"
					}, {
						"className": "task/google",
						"description": "get userinfo",
						"if": "{$data.redirectUrl}",
						"req": "{$request}",
						"method": "profile",
						"produce": "data.userData"
					}, {
						"className": "task/user",
						"description": "compose userData and sessionsData in one object",
						"request": "{$request}",
						"userData":"{$data.userData}",
						"method": "parse",
						"produce": "data.user"
					}, {
						"className": "task/mongoRequest",
						"description": "update user data",
						"connector": "mongo",
						"method": "update",
						"collection": "users",
						"data": "{$data.user}",
						"produce": "data.mongoResponse"
					}, {
						"className": "task/redirect",
						"description": "redirect to action or root",
						"if": "{$data.mongoResponse}",
						"url": "/profile.html",
						"output": "{$response}"
					}]
				}]
			}, {
				"path": "facebook",
				"workflows": [{
					"path": "login",
					"prepare": ["session"],
					"tasks": [{
						"className": "task/facebook",
						"description": "get oauth token",
						"req": "{$request}",
						"method": "login",
						"produce": "data.redirectUrl"
					}, {
						"className":"task/mongoRequest",
						"description": "save request data as anonymous user",
						"connector": "mongo",
						"method": "insert",
						"insertingSafe": true,
						"collection": "users",
						"data": [{
							"sessionUIDs": ["{$request.sessionUID}"],
							"tokens": {}
						}],
						"produce": "data.mongoResponse"
					}, {
						"className": "task/redirect",
						"if": "{$data.mongoResponse}",
						"url": "{$data.redirectUrl}",
						"output": "{$response}"
					}]
				}, {
					"path": "callback",
					"prepare": ["session", "user"],
					"tasks": [{
						"className": "task/facebook",
						"description": "get access token",
						"req": "{$request}",
						"method": "callback",
						"produce": "data.redirectUrl"
					}, {
						"className": "task/facebook",
						"description": "get userinfo",
						"if": "{$data.redirectUrl}",
						"req": "{$request}",
						"method": "profile",
						"produce": "data.userData"
					}, {
						"className": "task/facebook",
						"description": "get usergroups",
						"if": "{$data.redirectUrl}",
						"req": "{$request}",
						"method": "grouplist",
						"produce": "data.groupsData"
					}, {
						"className": "task/user",
						"description": "compose userData, groupsData and sessionsData in one object",
						"request": "{$request}",
						"userData": "{$data.userData}",
						"groupsData": "{$data.groupsData}",
						"method": "parse",
						"produce": "data.user"
					}, {
						"className": "task/mongoRequest",
						"description": "update user data",
						"connector": "mongo",
						"method": "update",
						"collection": "users",
						"data": "{$data.user}",
						"produce": "data.mongoResponse"
					}, {
						"className": "task/redirect",
						"description": "redirect to action or root",
						"if": "{$data.mongoResponse}",
						"url": "/profile.html",
						"output": "{$response}"
					}]
				}]
			}, {
				"path": "twitter",
				"workflows": [{
					"path": "login",
					"prepare": ["session"],
					"tasks": [{
						"className": "task/twitter",
						"description": "get oauth token",
						"scopes": ["profile", "userinfo", "contacts"],
						"req": "{$request}",
						"method": "login",
						"produce": "data.redirectUrl"
					}, {
						"className":"task/mongoRequest",
						"description": "save tokens as anonymous user",
						"connector": "mongo",
						"method": "insert",
						"insertingSafe": true,
						"collection": "users",
						"data": [{
							"sessionUIDs": ["{$request.sessionUID}"],
							"tokens": {
								"twitter_redirect_url" : "{$request.twitter_redirect_url}",
								"twitter_oauth_token": "{$request.twitter_oauth_token}",
								"twitter_oauth_token_secret": "{$request.twitter_oauth_token_secret}"							
							}
						}],
						"produce": "data.mongoResponse"
					}, {
						"className": "task/redirect",
						"if": "{$data.mongoResponse}",
						"url": "{$data.redirectUrl}",
						"output": "{$response}"
					}]
				}, {
					"url": "callback",
					"prepare": ["session", "user"],
					"tasks": [{
						"className": "task/twitter",
						"description": "get access token",
						"req": "{$request}",
						"method": "callback",
						"produce": "data.userId"
					}, {
						"className": "task/twitter",
						"description": "get userinfo",
						"userId": "{$data.userId}",
						"req": "{$request}",
						"method": "profile",
						"produce": "data.userData"
					}, {
						"className": "task/user",
						"description": "compose userData and sessionsData in one object",
						"request": "{$request}",
						"userData":"{$data.userData}",
						"method": "parse",
						"produce": "data.user"
					}, {
						"className": "task/mongoRequest",
						"description": "update user data",
						"connector": "mongo",
						"method": "update",
						"collection": "users",
						"data": "{$data.user}",
						"produce": "data.mongoResponse"
					}, {
						"className": "task/redirect",
						"description": "redirect to action or root",
						"if": "{$data.mongoResponse}",
						"url": "/profile.html",
						"output": "{$response}"
					}]
				}]
			}, {
				"path": "vkontakte",
				"workflows": [{
					"path": "login",
					"prepare": ["session"],
					"tasks": [{
						"className": "task/vkontakte",
						"description": "get oauth token",
						"req": "{$request}",
						"method": "login",
						"produce": "data.redirectUrl"
					}, {
						"className":"task/mongoRequest",
						"description": "save request data as anonymous user",
						"connector": "mongo",
						"method": "insert",
						"insertingSafe": true,
						"collection": "users",
						"data": [{
							"sessionUIDs": ["{$request.sessionUID}"],
							"tokens": {}
						}],
						"produce": "data.mongoResponse"
					}, {
						"className": "task/redirect",
						"if": "{$data.mongoResponse}",
						"url": "{$data.redirectUrl}",
						"output": "{$response}"
					}]
				}, {
					"path": "callback",
					"prepare": ["session", "user"],
					"tasks": [{
						"className": "task/vkontakte",
						"description": "get access token",
						"req": "{$request}",
						"method": "callback",
						"produce": "data.userId"
					}, {
						"className": "task/vkontakte",
						"description": "get userinfo",
						"userId": "{$data.userId}",
						"req": "{$request}",
						"method": "profile",
						"produce": "data.userData"
					}, {
						"className": "task/user",
						"description": "compose userData and sessionsData in one object",
						"request": "{$request}",
						"userData":"{$data.userData}",
						"method": "parse",
						"produce": "data.user"
					}, {
						"className": "task/mongoRequest",
						"description": "update user data",
						"connector": "mongo",
						"method": "update",
						"collection": "users",
						"data": "{$data.user}",
						"produce": "data.mongoResponse"
					}, {
						"className": "task/redirect",
						"description": "redirect to action or root",
						"if": "{$data.mongoResponse}",
						"url": "/profile.html",
						"output": "{$response}"
					}]
				}]
			}, {
				"path": "profile",
				"prepare": ["session", "user"],
				"tasks": [{
					"functionName":  "getProfile",
					"request":       "{$request}",
					"produce":       "data.profile"
				}],
				"presenter": {
					"type": "json",
					"vars": "{$data.profile}"
				}
			}]
		}
	}
}
